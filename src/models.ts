import sequelize, { Model, Sequelize } from 'sequelize'


type Mdl = (new () => Model<any, any>) & typeof Model

export class Models {
  adventure: Mdl
  scene: Mdl
  action: Mdl
  tag: Mdl
  achievement: Mdl
  adventureTag: Mdl
  actionScene: Mdl
  db: Sequelize

  constructor(db: Sequelize, adventure: Mdl, scene: Mdl,
    action: Mdl, tag: Mdl, achievement: Mdl, adventureTag: Mdl, actionScene: Mdl) {
    this.db = db
    this.adventure = adventure
    this.scene = scene
    this.action = action
    this.tag = tag
    this.achievement = achievement
    this.adventureTag = adventureTag
    this.actionScene = actionScene
  }
}

export const init = async (models: Models) => {
  await models.db.sync({ force: true })
  const tag: any = await models.tag.create({ name: 'магия', linkName: 'magic' })
  const tag2: any = await models.tag.create({ name: 'тестоваямагия', linkName: 'magic2' })
  const scenes = await Promise.all([
    models.scene.create({
      description: 'Этот текст находится в правом верхнем углу',
      textAlign: 'NE',
      imageUrl: '/screen.jpg',
    }),
    models.scene.create({
      description: 'Вы стали мудрее... (подходящей картинки нет, только ачивка)',
      textAlign: 'SW',
    }),
    models.scene.create({
      description: 'Последняя сцена.\nКонец.\n\nПоздравляем!',
      imageUrl: '/screen2.jpg',
      textAlign: 'SE',
    }),
  ]) as any[]
  const actions = await Promise.all([
    models.action.create({ description: 'Стать мудрее', sceneId: scenes[1].id }),
    models.action.create({ description: 'Перейти в конец', sceneId: scenes[2].id }),
  ]) as any[]
  await Promise.all([
    models.actionScene.create({ sceneId: scenes[0].id, actionId: actions[0].id }),
    models.actionScene.create({ sceneId: scenes[0].id, actionId: actions[1].id }),
  ])
  const adventures = await Promise.all([
    models.adventure.create({
      name: 'Тестовое приключение #2',
      sceneId: scenes[0].id,
    }),
    models.adventure.create({
      name: 'Тестовое приключение',
      description: 'Ничего интересного, просто тест',
      imageUrl: '/preview.png',
      sceneId: scenes[0].id,
    }),
    models.adventure.create({
      name: 'Тестовое приключение #3',
      description: 'То же приключение, но без картинки и без стартовой сцены',
    }),
  ]) as any[]
  await Promise.all([
    models.adventureTag.create({ adventureId: adventures[0].id, tagId: tag.id }),
    models.adventureTag.create({ adventureId: adventures[1].id, tagId: tag.id }),
    models.adventureTag.create({ adventureId: adventures[1].id, tagId: tag2.id }),
  ])
  await models.achievement.create({
    description: 'Мудрец',
    sceneId: scenes[1].id,
    imageUrl: '/wizard.jpg',
  })
  await models.achievement.create({
    description: 'Мудрец2',
    sceneId: scenes[1].id,
  })
  await models.achievement.create({
    description: 'Мудрец3',
    sceneId: scenes[1].id,
  })
  await models.achievement.create({
    description: 'Вы прошли игру!',
    sceneId: scenes[2].id,
  })
}

export const connect = async (conString: string): Promise<Models> => {
  const db = new Sequelize(conString, {
    logging: false,
    pool: {
      max: 5,
      min: 0,
      idle: 10000,
    },
  })
  await db.authenticate()
  // https://krmannix.com/2017/05/23/postgres-autogenerated-uuids-with-sequelize/
  await db.query('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
  class Adventure extends Model {}
  class Scene extends Model {}
  class Action extends Model {}
  class Tag extends Model {}
  class Achievement extends Model {}
  class AdventureTag extends Model {}
  class ActionScene extends Model {}
  const id = {
    type: sequelize.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  }
  Tag.init({
    id,
    name: { type: sequelize.STRING(50), unique: true },
    linkName: { type: sequelize.STRING(50), unique: true },
  }, { sequelize: db, timestamps: false, modelName: 'tag' })
  Achievement.init({
    id,
    description: { type: sequelize.TEXT },
    imageUrl: { type: sequelize.TEXT },
  }, { sequelize: db, timestamps: false, modelName: 'achievement' })
  Scene.init({
    id: {
      type: sequelize.UUID,
      defaultValue: sequelize.literal('uuid_generate_v4()'),
      primaryKey: true,
    },
    description: { type: sequelize.TEXT },
    imageUrl: { type: sequelize.TEXT },
    textAlign: { type: sequelize.ENUM('NW', 'NE', 'SE', 'SW') },
  }, { sequelize: db, timestamps: false, modelName: 'scene' })
  Action.init({
    id,
    description: { type: sequelize.STRING },
  }, { sequelize: db, timestamps: false, modelName: 'action' })
  Adventure.init({
    id,
    name: { type: sequelize.STRING },
    description: { type: sequelize.TEXT },
    imageUrl: { type: sequelize.TEXT },
  }, { sequelize: db, timestamps: false, modelName: 'adventure' })
  ActionScene.init({}, { sequelize: db, timestamps: false, modelName: 'action_scene' })
  AdventureTag.init({}, { sequelize: db, timestamps: false, modelName: 'adventure_tag' })
  Adventure.belongsToMany(Tag, { through: AdventureTag })
  Tag.belongsToMany(Adventure, { through: AdventureTag })

  Scene.hasMany(Achievement)
  Achievement.belongsTo(Scene)

  Action.belongsTo(Scene, { as: 'Scene', foreignKey: 'sceneId' })
  Action.belongsToMany(Scene, { through: ActionScene })
  Scene.belongsToMany(Action, { through: ActionScene })

  Adventure.belongsTo(Scene)
  await db.sync()
  return new Models(db, Adventure, Scene, Action, Tag, Achievement, AdventureTag, ActionScene)
}
